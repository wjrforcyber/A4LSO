@online{Yosys,
	author = {Claire Wolf},
	title = {Yosys Open SYnthesis Suite},
    year = 2024,
	url = "\url{https://yosyshq.net/yosys/}"
}

@inproceedings{EnablingExactDelaySynthesis, author = {Amar\'{u}, Luca and Soeken, Mathias and Vuillod, Patrick and Luo, Jiong and Mishchenko, Alan and Gaillardon, Pierre-Emmanuel and Olson, Janet and Brayton, Robert and De Micheli, Giovanni}, title = {Enabling exact delay synthesis}, year = {2017}, publisher = {IEEE Press}, abstract = {Given (i) a Boolean function, (ii) a set of arrival times at the inputs, and (iii) a gate library with associated delay values, the exact delay synthesis problem asks for a circuit implementation which minimizes the arrival time at the output(s). The exact delay synthesis problem, with given input arrival times, relates to computing the communication complexity of a Boolean function, which is an intractable problem. Input arrival times are variable and can take any value, thereby making the exact delay synthesis search space infinite. This paper presents theory and algorithms for exact delay synthesis. We introduce the theory of equioptimizable arrival times, which allows us to partition all arrival time patterns into a finite set of equivalence classes. Thanks to this new theory, we create for the first time exact delay circuit databases covering all Boolean functions up to 5 variables and all possible arrival time patterns. We describe further arrival time compression techniques which enable the creation of larger databases. We propose an enhanced delay synthesis flow capable of dealing with large circuits, combining exact delay logic rewriting and Boolean optimization techniques, attaining unprecedented results. We improve 9/10 of the best known results in the EPFL arithmetic delay synthesis competition, outperforming previous best results up to 3x. Embedded in a commercial EDA flow for ASICs, our exact delay synthesis techniques reduce the total negative slack by 12.17\%, after physical implementation, at negligible area and runtime costs.}, booktitle = {Proceedings of the 36th International Conference on Computer-Aided Design}, pages = {352–359}, numpages = {8}, location = {Irvine, California}, series = {ICCAD '17} }

@book{CalculusOfComputation,
author = {Bradley, Aaron R. and Manna, Zohar},
title = {The Calculus of Computation: Decision Procedures with Applications to Verification},
year = {2007},
isbn = {3540741127},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg}
}


@book{EDA2009, author = {Wang, Laung-Terng and Chang, Yao-Wen and Cheng, Kwang-Ting (Tim)}, title = {Electronic Design Automation: Synthesis, Verification, and Test}, year = {2009}, isbn = {9780080922003}, publisher = {Morgan Kaufmann Publishers Inc.}, address = {San Francisco, CA, USA}, abstract = {This book provides broad and comprehensive coverage of the entire EDA flow. EDA/VLSI practitioners and researchers in need of fluency in an "adjacent" field will find this an invaluable reference to the basic EDA concepts, principles, data structures, algorithms, and architectures for the design, verification, and test of VLSI circuits. Anyone who needs to learn the concepts, principles, data structures, algorithms, and architectures of the EDA flow will benefit from this book. Covers complete spectrum of the EDA flow, from ESL design modeling to logic/test synthesis, verification, physical design, and test - helps EDA newcomers to get "up-and-running" quickly Includes comprehensive coverage of EDA concepts, principles, data structures, algorithms, and architectures - helps all readers improve their VLSI design competence Contains latest advancements not yet available in other books, including Test compression, ESL design modeling, large-scale floorplanning, placement, routing, synthesis of clock and power/ground networks - helps readers to design/develop testable chips or products Includes industry best-practices wherever appropriate in most chapters - helps readers avoid costly mistakes Table of Contents Chapter 1: Introduction Chapter 2: Fundamentals of CMOS Design Chapter 3: Design for Testability Chapter 4: Fundamentals of Algorithms Chapter 5: Electronic System-Level Design and High-Level Synthesis Chapter 6: Logic Synthesis in a Nutshell Chapter 7: Test Synthesis Chapter 8: Logic and Circuit Simulation Chapter 9: Functional Verification Chapter 10: Floorplanning Chapter 11: Placement Chapter 12: Global and Detailed Routing Chapter 13: Synthesis of Clock and Power/Ground Networks Chapter 14: Fault Simulation and Test Generation.} }

CNF
@book{HandbookOfSAT,
author = {Biere, A. and Biere, A. and Heule, M. and van Maaren, H. and Walsh, T.},
title = {Handbook of Satisfiability: Volume 185 Frontiers in Artificial Intelligence and Applications},
year = {2009},
isbn = {1586039296},
publisher = {IOS Press},
address = {NLD},
abstract = { 'Satisfiability (SAT) related topics have attracted researchers from various disciplines: logic, applied areas such as planning, scheduling, operations research and combinatorial optimization, but also theoretical issues on the theme of complexity and much more, they all are connected through SAT. My personal interest in SAT stems from actual solving: The increase in power of modern SAT solvers over the past 15 years has been phenomenal. It has become the key enabling technology in automated verification of both computer hardware and software. Bounded Model Checking (BMC) of computer hardware is now probably the most widely used model checking technique. The counterexamples that it finds are just satisfying instances of a Boolean formula obtained by unwinding to some fixed depth a sequential circuit and its specification in linear temporal logic. Extending model checking to software verification is a much more difficult problem on the frontier of current research. One promising approach for languages like C with finite word-length integers is to use the same idea as in BMC but with a decision procedure for the theory of bit-vectors instead of SAT. All decision procedures for bit-vectors that I am familiar with ultimately make use of a fast SAT solver to handle complex formulas. Decision procedures for more complicated theories, like linear real and integer arithmetic, are also used in program verification. Most of them use powerful SAT solvers in an essential way. Clearly, efficient SAT solving is a key technology for 21st century computer science. I expect this collection of papers on all theoretical and practical aspects of SAT solving will be extremely useful to both students and researchers and will lead to many further advances in the field.' Edmund Clarke (FORE Systems University Professor of Computer Science and Professor of Electrical and Computer Engineering at Carnegie Mellon University)}
}

@online{AIGERFormat,
  author = {Armin Biere},
  title = {The AIGER And-Inverter Graph (AIG) Format Version 20071012},
  year = 2007,
  url = {https://fmv.jku.at/papers/Biere-FMV-TR-07-1.pdf}
}

@techreport{Biere-FMV-TR-11-2,
  author = {Armin Biere and Keijo Heljanko and Siert Wieringa},
  title = {{AIGER 1.9} And Beyond},
  number = {11/2},
  date = {July 2011},
  institution = {Institute for Formal Models and Verification,
    Johannes Kepler University},
  address = {Altenbergerstr. 69, 4040 Linz, Austria},
  year={2011},
}

@INPROCEEDINGS{HuangNPN,
  author={Huang, Zheng and Wang, Lingli and Nasikovskiy, Yakov and Mishchenko, Alan},
  booktitle={2013 International Conference on Field-Programmable Technology (FPT)}, 
  title={Fast Boolean matching based on NPN classification}, 
  year={2013},
  volume={},
  number={},
  pages={310-313},
  keywords={Boolean functions;Runtime;Algorithm design and analysis;Heuristic algorithms;Libraries;Data structures;Partitioning algorithms},
  doi={10.1109/FPT.2013.6718374}}

Majority
@misc{MIGOri,
  author = {Luca Amarù},
  title = {Majority-Inverter Graph (MIG)},
  howpublished = {\url{https://www.epfl.ch/labs/lsi/page-102566-en-html/mig/}},
  year = 2014,
  note = {Accessed: 2024-10-22}
}

Node type
@inproceedings{FactoredCuts,
author = {Mishchenko, Alan and Chatterjee, Satrajit and Brayton, Robert},
title = {Improvements to technology mapping for LUT-based FPGAs},
year = {2006},
isbn = {1595932925},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1117201.1117208},
doi = {10.1145/1117201.1117208},
abstract = {The paper presents several improvements to state-of-the-art in FPGA technology mapping exemplified by a recent advanced technology mapper DAOmap [Chen and Cong, ICCAD '04]. Improved cut enumeration computes all K-feasible cuts without pruning for up to 7 inputs for the largest MCNC benchmarks. A new technique for on-the-fly cut dropping reduces by orders of magnitude memory needed to represent cuts for large designs. Improved area recovery leads to mappings with area on average 7\% smaller than DAOmap, while preserving delay optimality when starting from the same optimized netlists. Applying mapping with structural choices derived by a synthesis flow on average reduces delay by 7\% and area by 14\%, compared to DAOmap.},
booktitle = {Proceedings of the 2006 ACM/SIGDA 14th International Symposium on Field Programmable Gate Arrays},
pages = {41–49},
numpages = {9},
keywords = {FPGA, area recovery, cut enumeration, lossless synthesis, technology mapping},
location = {Monterey, California, USA},
series = {FPGA '06}
}

@misc{FFLC, title={Improving Standard-Cell Design Flow using Factored Form Optimization}, url={https://infoscience.epfl.ch/handle/20.500.14299/199379}, abstractNote={Factored form is a powerful multi-level representa- tion of a Boolean function that readily translates into an imple- mentation of the function in CMOS technology. In particular, the number of literals in a factored form correlates strongly with the number of transistors in the CMOS implementation. This paper develops novel methods for optimizing factored forms while working on the efficient and-inverter graph (AIG) representation of combinational logic. This is in contrast to the traditional logic synthesis based on logic networks, and other AIG-based methods that minimize the AIG nodes count. Experiments show that applying these methods helps to reduce the area after technology mapping by an additional 2.8% on average, compared to a high-effort area-oriented baseline. It is expected that deploying these methods as part of an industrial standard-cell design flow will reduce design costs and power consumption. Additionally, this work enables efficient transistor-level logic synthesis of large designs with various applications in design automation.}, author={Tempia Calvino, Alessandro and Mishchenko, Alan and Schmit, Herman and Mahintorabi, Ethan and Xu, Xiaoqing and De Micheli, Giovanni}, year={2023}, month={jul} }



@inproceedings{PriorityCuts,
author = {Mishchenko, Alan and Cho, Sungmin and Chatterjee, Satrajit and Brayton, Robert},
title = {Combinational and sequential mapping with priority cuts},
year = {2007},
isbn = {1424413826},
publisher = {IEEE Press},
abstract = {An algorithm for technology mapping of combinational and sequential logic networks is proposed and applied to mapping into K-input lookup-tables (K-LUTs). The new algorithm avoids the hurdle of computing all K-input cuts while preserving the quality of the results, in terms of area and depth. The memory and runtime of the proposed algorithm are linear in circuit size and quite affordable even for large industrial designs. For example, computing a good quality 6-LUT mapping of an AIG with IM nodes takes 150Mb of RAM and 1 minute on a typical laptop. An extension of the algorithm allows for sequential mapping, which searches the combined space of all possible mappings and retimings. This leads to an 18--22\% improvement in depth with a 3--5\% LUT count penalty, compared to combinational mapping followed by retiming.},
booktitle = {Proceedings of the 2007 IEEE/ACM International Conference on Computer-Aided Design},
pages = {354–361},
numpages = {8},
location = {San Jose, California},
series = {ICCAD '07}
}

@inproceedings{Mishchenko2006ScalableLS,
  title={Scalable Logic Synthesis using a Simple Circuit Structure},
  author={Alan Mishchenko and Robert K. Brayton},
  year={2006},
  url={https://api.semanticscholar.org/CorpusID:8597391}
}

@phdthesis{TestaLS, address={Lausanne}, title={Data Structures and Algorithms for Logic Synthesis in Advanced Technologies}, url={https://infoscience.epfl.ch/handle/20.500.14299/171171}, DOI={10.5075/epfl-thesis-8164}, abstractNote={Logic synthesis is a key component of digital design and modern EDA tools; it is thus an essential instrument for the design of leading-edge chips and to push the limits of their performance. In the last decades, the electronic circuits community has evolved dramatically, facing many technological changes. Consequently, EDA and logic synthesis have adapted to accurately design the new generation of digital systems. In the present day, logic synthesis is an important area of research for two main reasons: (i) Diverse ways of computation, alternative to CMOS, have been presented in the last years. Post-silicon technologies have been shown to be feasible and may provide us with better electronic devices. Similarly, novel areas of applications are emerging, ranging from deep learning to cryptography applications. (ii) The current computing and storage means make it possible to solve exactly problems that were only approximated before. Moreover, new reasoning engines, covering from deep learning to new SAT-solvers, can be used as a mean of computation, thus possibly unlocking novel optimization opportunities. 

The objective of this thesis is to advance state-of-the-art logic synthesis and present a variety of novel data structures and algorithms, addressing diverse types of applications in modern logic synthesis flows, considering standard CMOS design as well as emerging technology and cryptography. 

Motivated by the many emerging technologies that implement majority gates, we first focus on majority-based logic synthesis. We present algorithms over the recently introduced majority-inverter graphs. First, a size optimization flow based on Boolean transformations is proposed. Then, we demonstrate how technology-dependent logic synthesis is an essential step for the abstraction of majority-based emerging technologies and, more important, their technological constraints. Moreover, we advance theoretical results on majority logic. In particular, we mainly focus on the problem of “‘how best can the n-argument majority function (majority-n) be realized with a network of 3-input majority gates?’”  . For this purpose, we present general upper bounds and decompositions, together with optimum results for majority-5 and -7 and best-known results for the majority-9. In the second part, we shift into more pragmatic results and show practical aspects of logic synthesis, designed to be successful in modern logic synthesis flows. We focus on XOR-based logic synthesis. Motivated by the novel computing capabilities, we propose an optimization flow based on the Boolean difference for area optimization of standard CMOS technologies. Finally, we establish a novel application of logic synthesis to cryptography. It has been demonstrated that the number of AND gates in a xor-and graph (XAG) correlates with the degree of vulnerability (security) of cryptography benchmarks and plays an important role for high-level cryptography protocols. We thus introduce a complete and automatic synthesis flow which consists of the main transformations of logic synthesis but aims instead at minimization of the number of AND gates over XAGs, obtaining significant results over cryptography benchmarks.

We argue that given the progress and novel opportunities of technology, logic synthesis has to be revisited to consider the plurality of primitives and novel engines that can be of interest, and, consequently, the corresponding objective functions and optimisation problems.}, school={EPFL}, author={Testa, Eleonora}, year={2020}, keywords={Electronic design automation | logic synthesis | majority logic | emerging technologies}, language={en} }

@inproceedings{ZhuFFW,
  author={Xuliang Zhu and Ruofei Tang and Lei Chen and Xing Li and Xin Huang and Mingxuan Yuan and Weihua Sheng and Jianliang Xu},
  title={A Database Dependent Framework for K-Input Maximum Fanout-Free Window Rewriting},
  year={2023},
  cdate={1672531200000},
  pages={1-6},
  url={https://doi.org/10.1109/DAC56929.2023.10247727},
  booktitle={DAC},
}


@inproceedings{EPFLCombBenchmark, title={The EPFL Combinational Benchmark Suite}, url={https://infoscience.epfl.ch/handle/20.500.14299/113476}, abstractNote={In this paper, we present the EPFL combinational benchmark suite. We aim at completing existing benchmark suites by focusing only on natively combinational benchmarks. The EPFL combinational benchmark suite consists of 23 combinational circuits designed to challenge modern logic optimization tools. It is further divided into three parts. The first part includes 10 arithmetic benchmarks, e.g., square-root, hypotenuse, divisor, multiplier etc.. The second part consists of 10 random/control benchmarks, e.g., round-robin arbiter, lookahead XY router, alu control unit, memory controller etc.. The third part contains 3 very large circuits, featuring more than ten million gates each. All benchmarks have a moderate number of inputs/outputs ranging from few tens to about one thousand. The EPFL benchmark suite is available to the public and distributed in all Verilog, VHDL, BLIF and AIGER formats. In addition to providing the benchmarks, we keep track of the best optimization results, mapped into LUT-6, for size and depth metrics. Better logic implementations can be submitted online. After combinational equivalence checking tests, the best LUT-6 realizations will be included in the benchmark suite together with the author’s name and affiliation.}, author={Amarù, Luca and Gaillardon, Pierre-Emmanuel and De Micheli, Giovanni}, year={2015}, journal={Proceedings of the 24th International Workshop on Logic & Synthesis (IWLS)} }